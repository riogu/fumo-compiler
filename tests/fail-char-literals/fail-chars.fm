fn printf(format: char*, ...) -> i32;

// These tests are designed to FAIL compilation
// Each test function contains code that should cause compilation errors
// Uncomment individual functions to test specific error cases

fn test_multi_character_literals() -> void {
    printf("Testing multi-character literals (should fail):\n");
    
    // These should all cause compilation errors:
    let fail1: char = 'ab';           // ERROR: Multi-character literal
    let fail2: char = 'hello';        // ERROR: Multi-character literal
    let fail3: char = 'test';         // ERROR: Multi-character literal
    let fail4: i32 = 'こん';         // ERROR: Multi-character Japanese literal
    let fail5: i32 = 'hello世界';    // ERROR: Multi-character mixed literal
    let fail6: char = '123';          // ERROR: Multi-character numeric literal
    
    printf("Multi-character test complete\n");
}

fn test_empty_character_literals() -> void {
    printf("Testing empty character literals (should fail):\n");
    
    // These should cause compilation errors:
    let fail1: char = '';             // ERROR: Empty character literal
    let fail2: i32 = '';            // ERROR: Empty character literal
    
    printf("Empty character test complete\n");
}

fn test_unclosed_character_literals() -> void {
    printf("Testing unclosed character literals (should fail):\n");
    
    // These should cause compilation errors:
    let fail1: char = 'a;             // ERROR: Unclosed character literal
    let fail2: char = a';             // ERROR: Missing opening quote
    let fail3: char = 'あ;            // ERROR: Unclosed Japanese character
    let fail4: char = '一;            // ERROR: Unclosed kanji character
    
    printf("Unclosed character test complete\n");
}

fn test_invalid_escape_sequences() -> void {
    printf("Testing invalid escape sequences (should fail):\n");
    
    // These should cause compilation errors:
    let fail1: char = '\z';           // ERROR: Invalid escape sequence
    let fail2: char = '\';            // ERROR: Incomplete escape at end
    let fail3: char = '\x';           // ERROR: Incomplete hex escape
    let fail4: char = '\u';           // ERROR: Incomplete unicode escape
    let fail5: char = '\u12';         // ERROR: Incomplete unicode escape
    let fail6: char = '\u12G4';       // ERROR: Invalid hex digit in unicode
    let fail7: char = '\xGG';         // ERROR: Invalid hex digits
    let fail8: char = '\777';         // ERROR: Octal value too large
    let fail9: char = '\400';         // ERROR: Octal value too large
    
    printf("Invalid escape test complete\n");
}

fn test_newlines_in_literals() -> void {
    printf("Testing newlines in character literals (should fail):\n");
    
    // These should cause compilation errors:
    let fail1: char = '
    ';                              // ERROR: Literal newline in character
    
    let fail2: char = 'a
    b';                             // ERROR: Multi-line character literal
    
    printf("Newline test complete\n");
}

fn test_wrong_quote_types() -> void {
    printf("Testing wrong quote types (should fail):\n");
    
    // These should cause compilation errors:
    let fail1: char = "a";            // ERROR: String literal for character
    let fail2: char = `a`;            // ERROR: Backtick literal for character
    let fail3: char = "あ";           // ERROR: Japanese char in string quotes
    let fail4: char = `一`;           // ERROR: Kanji in backticks
    
    printf("Wrong quote test complete\n");
}

fn test_type_overflow() -> void {
    printf("Testing type overflow (should fail):\n");
    
    // These should cause compilation errors due to value overflow:
    let fail1: char = 'あ';           // ERROR: Japanese character too large for char
    let fail2: char = 'ア';           // ERROR: Katakana too large for char
    let fail3: char = '一';           // ERROR: Kanji too large for char
    let fail4: char = '🎌';           // ERROR: Emoji definitely too large
    let fail5: char = '\u1234';       // ERROR: Unicode value too large for char
    let fail6: char = '\x80';         // ERROR: Value 128 too large for signed char
    let fail7: char = '\xFF';         // ERROR: Value 255 too large for signed char
    
    printf("Type overflow test complete\n");
}

fn test_invalid_character_operations() -> void {
    printf("Testing invalid character operations (should fail):\n");
    
    // These should cause compilation errors:
    let char1: char = 'a';
    let char2: char = 'b';
    
    // Depending on your language rules, these might fail:
    let fail1: char* = &'a';          // ERROR: Taking address of literal
    let fail2: char = 'a' + 'b' + 'c' + 'd' + 'e'; // ERROR: Expression too complex or overflow
    
    // Array initialization errors
    let fail3: char[3] = {'ab', 'cd', 'ef'}; // ERROR: Multi-char elements
    let fail4: char[2] = {'', 'a'};          // ERROR: Empty char in array
    
    printf("Invalid operations test complete\n");
}

fn test_mixed_encoding_errors() -> void {
    printf("Testing mixed encoding errors (should fail):\n");
    
    // These should cause compilation errors:
    let fail1: char = 'a\u3042';      // ERROR: Mixed ASCII and Unicode
    let fail2: char = '\x41\u3042';   // ERROR: Mixed hex and Unicode
    let fail3: char = 'A一';          // ERROR: Mixed ASCII and Kanji
    let fail4: char = 'あア';         // ERROR: Mixed Hiragana and Katakana
    
    printf("Mixed encoding test complete\n");
}

fn test_unterminated_escapes() -> void {
    printf("Testing unterminated escapes (should fail):\n");
    
    // These should cause compilation errors:
    let fail1: char = '\u123';        // ERROR: Incomplete Unicode escape
    let fail2: char = '\x1';          // ERROR: Incomplete hex escape  
    let fail3: char = '\12';          // ERROR: Incomplete octal escape
    let fail4: char = '\u{123';       // ERROR: Unterminated Unicode brace
    let fail5: char = '\u{12345}';    // ERROR: Unicode value too large
    
    printf("Unterminated escape test complete\n");
}

// Main function that tries to compile all the failing code
// This entire program should NOT compile successfully
fn main() -> i32 {
    printf("Character Literal Failure Tests\n");
    printf("================================\n");
    printf("This program should NOT compile successfully!\n");
    printf("Each function below contains code that should cause compilation errors.\n\n");
    
    // Uncomment individual test functions to test specific error cases:
    
    test_multi_character_literals();
    test_empty_character_literals();
    test_unclosed_character_literals();
    test_invalid_escape_sequences();
    test_newlines_in_literals();
    test_wrong_quote_types();
    test_type_overflow();
    test_invalid_character_operations();
    test_mixed_encoding_errors();
    test_unterminated_escapes();
    
    printf("\n=== If you see this message, the parser failed to catch errors! ===\n");
    printf("The compiler should have rejected this code with error messages.\n");
    
    return 1; // Return error code
}
