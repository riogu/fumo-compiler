struct Container[T] {
    let value: T;
    fn get() -> T { return value; }
    fn static make(v: T) -> Container[T];
}
fn Container[T]::make(v: T) -> Container[T] { return Container[T]{v}; }

struct Pair[T, U] {
    let first: T;
    let second: U;
    
    fn static make(a: T, b: U) -> Pair[T, U];
}
fn Pair[T, U]::make(a: T, b: U) -> Pair[T, U] {
    return Pair[T, U]{a, b};
}

fn main() -> void {
    let nested = 
         Container[Pair[i32, Container[f64]]]::make(Pair[i32,
                                                    Container[f64]]::make(42, Container[f64]::make(3.14)));
    let inner_pair = nested.get();
    let wrapped_float = inner_pair.second;
    let actual_float = wrapped_float.get();
}
